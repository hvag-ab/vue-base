## 父传子组件
<template>
  // v-bind来绑定动态数据，静态数据可以不用v-bind指令(:是v-bind的简写)
  <child-component :message='message'></child-component>
</template>

<script>
import child from 'child.vue';
export default {
  name: "father",
  data() {
    return {
      message: 'hello'
    }
  },
  components: {
    'child-component': child
  }
}
</script>

# 子组件
<template>
  <div class='child'>{{ message }}</div>
</template>

<script>
export default {
  name: "child",
  props: ['message']
}
</script>

prop验证

<script>
export default {
  name: "child",
  props: {
    // 基础类型检测 (`null` 指允许任何类型)
    propA: Number,
    // 可能是多种类型
    propB: [String, Number, Array],
    // 必传且是字符串
    propC: {
      type: String,
      required: true
    },
    // 数值且有默认值
    propD: {
      type: Number,
      default: 100
    },
    // 数组/对象的默认值应当由一个工厂函数返回
    propE: {
      type: Object,
      default: function () {
        return { message: 'hello' }
      }
    },
    // 自定义验证函数
    propF: {
      validator: function (value) {
        return value > 10
      }
    }
  }
}
</script>

# 子组件如何将数据传到父组件中

<template>
  // 父组件监听listenChild事件，执行getChildData方法，并且拿到传递过来的数据(@是v-on的简写)
  <child-component @listenToChild='getChildData'></child-component>
</template>

<script>
import child from 'child.vue';
export default {
  name: "father",
  methods: {
    getChildData (val) {
      console.log(`子组件传递过来的数据: ${val}`); // hello
    }
  },
  components: {
    'child-component': child
  }
}
</script>

# 子组件
<template>
  <div class='child'></div>
</template>

<script>
export default {
  name: "child",
  created () {
    // 在需要的传递数据的时候调用sendData方法，这里模拟调用
    this.sendData();
  },
  methods: {
    sendData () {
      // hello是传递给父组件的数据 listenToChild是父组件监听的函数
      this.$emit('listenToChild', 'hello');
    }
  }
}
</script>

$parent和$children
$parent指向父组件实例，在根实例中的值为undefined
$children是一个数组，包含了该组件下的所有子组件

子组件
<template>
  <div>
    <h2>我是子组件</h2>
    <p>父组件传过来的值: {{msg}}</p>
    <!-- 子组件给父组件传值 点击事件 -->
    <button @click="toFather">给父组件传值</button>
  </div>
</template>

<script>
export default {
  methods: {
    toFather(){
      this.$parent.text="这是一个寂寞的天"
    }
  },
}
</script>

父组件
<template>
   <div>
      <h1>我是父组件</h1>
      <son msg="123"></son>
      <p>{{text}}</p>
   </div>
</template>

<script>
import son from './son.vue'
export default {
  components:{
    son
  },
  data() {
    return {
      text:''
    }
  },
}
</script>

