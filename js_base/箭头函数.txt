1 通常函数function
const add = function (x,y){
    return x+y
}

2 对象字面量函数 必须在对象中
const obj = {
    a:function(){
        return 3
    },
    b(){ // 推荐写法
        return 4
    },
    c : h => h
}

3.箭头函数：三种写法

let add = (x,y)=>{return x+y;} —> //常规写法

let add = x=>{return x+y;} —> //一个参数时，可以省略 ()

let add = x=>x+y —> // 函数体只有一句话时，可以省略 {}，默认将x+y作为返回值

let add = (x=1,y=2)=>x+y —> // 给x，y设置了默认参数1,2

优势： 
1.解决了this的指向问题；
const obj = {
    aaa(){
        setTimeout(function () {
            console.log(this) // 返回 window 对象
        }),
        console.log(this)
        setTimeout( () => {
            console.log(this) // 返回 obj 对象
        }),
    },

}
箭头函数中的this 向外层作用域中，一层层查找this 直到有this的定义
因为外层是obj对象 对象中的this就指向obj  如果不是obj对象里面 直接是函数的话 都指向window对象



2.写法更加简洁。

rest/spread参数：

//rest
function add(a, ...b){
    console.log(a)  // 1
    console.log(b)  // [2,3,4]
}
add(1,2,3,4);

//spread
let c = [1,2,3,4];
function add2(a,b,c){
    console.log(a,b,c)   // 1,2,3
    console.log(arguments[3]) // 4
}
add2(...c);
函数的尾调用：提升性能 
在函数结束的return后跟一个函数调用

function b(){ return c(); }
function c(){};