
4.6 盒子模型
4.6.1
盒子模型
margin: 用于控制元素与元素之间的距离；margin的最基本用途就是控制元素周围空间的间隔，从视觉角度上达到相互隔开的目的。
padding: 用于控制内容与边框之间的距离；
border(边框): 围绕在内边距和内容外的边框。
content(内容): 盒子的内容，显示文本和图像。
4.6.1 margin（外边距）
盒子与盒子之间的距离

单边外边距属性：

margin-top:100px;   顶部
margin-bottom:100px;    底部
margin-right:50px;  右边
margin-left:50px;   左边
简写属性：

/* 将所有边距设置为1个像素 */
margin:1px;
/* 将顶部和底部设置为1个像素，左右设置为2个像素 */
margin:1px 2px;
/* 将顶部设置为1个像素，左右设置为2个像素，底部设置为3个像素 */
margin:1px 2px 3px;
/* 将顶部设置为1个像素，右侧设置为2个像素，底部设置为3个像素，左侧设置为4个像素 */
margin:1px 2px 3px 4px;

可以是负数
例如 margin-top:-3px 向上移动 

盒子左右外边距都设置为auto 表示左右边距相等 只能使用于块元素
如果是行内块元素 就需要父元素 添加text-align:center;

margin 不会撑大盒子

居中应用
margin: 0 auto; 将盒子水平居于屏幕正中间，距离屏幕顶部为0像素；如果这里的0换成20px，则会将盒子向下移动20像素；

4.6.2 padding（内边距）
单独使用填充属性可以改变上下左右的填充。缩写填充属性也可以使用，一旦改变一切都改变。

如果设置了 width 和 height padding会撑大盒子 如果设置了 那么就用margin 就不会撑大盒子
盒子 = width / height - padding 才能保持盒子固定高度和宽度
pading一般用来保持里面字体等内容间隔边距距相等
例如导航
.nav a{
  display:inline-block;
  height:41px;
  padding:0 20px;
  font-size:12px;
  color:#4c4c4c;
  text-decoration:none;
}

&:hover{
  background-color:#eee; 背景色
  color #ff8500;  字体颜色
}
<div class="nav">
  <a href="#">新浪导航</a>
  <a href="#">新浪网</a>
</div>

## 如果盒子本身没有制定width or height属性 那么就会继承父盒子的width height 此时的padding不会撑开盒子的大小 但是如果设定了就会撑开
设置同margin；

padding 用于使用点击激活效果例如
<div>
   <span>a</span>
   <span>b</span>
</div>

.span {
  padding 3px 6px 3px 6px;
  background: blue;
}

边框 border
border : border-width || border-style || border-color
border : 1px solid pink;

border-top 3px solid pink;
....

边框样式用于定义页面中边框的风格，常用属性值如下：

none：没有边框即忽略所有边框的宽度（默认值）

solid：边框为单实线(最为常用的)

dashed：边框为虚线

dotted：边框为点线

double：边框为双实线

圆角边框(CSS3)
从此以后，我们的世界不只有矩形。radius 半径（距离）

border-radius: 左上角  右上角  右下角  左下角;
border-radius:30px; or 50% 

border-collapse:collapse; 边框重叠的时候合并边框 否则边框和叠加变粗


box-sizing属性语法格式

box-sizing: content-box/border-box/inherit;

参数说明

content-box：这是由CSS2.1规定的宽度高度行为，宽度和高度分别应用到元素的内容框，在宽度和高度之外绘制元素的内边距和边框；
border-box：为元素设定的宽度和高度决定了元素的边框盒，就是说，为元素指定的任何内边距和边框都将在已设定的宽度和高度内进行绘制。通过从已设定的宽度和高度分别减去边框和内边距才能得到内容的宽度和高度;
inherit：规定应从父元素继承box-sizing属性的值;

外边距实现盒子居中
可以让一个盒子实现水平居中，需要满足一下两个条件：

必须是块级元素。
盒子必须指定了宽度（width）
然后就给左右的外边距都设置为auto，就可使块级元素水平居中。

实际工作中常用这种方式进行网页布局，示例代码如下：

  .header{ width:960px; margin:0 auto;}
文字盒子居中图片和背景区别
文字水平居中是  text-align: center
盒子水平居中  margin: 10px auto;  /* 盒子水平居中  左右margin 改为 auto 就阔以了 */


清除元素的默认内外边距
为了更方便地控制网页中的元素，制作网页时，可使用如下代码清除元素的默认内外边距：

  * {
     padding:0;         /* 清除内边距 */
     margin:0;          /* 清除外边距 */
  }

盒子阴影
语法格式：

  box-shadow:水平阴影 垂直阴影 模糊距离 阴影尺寸 阴影颜色  内/外阴影；

前两个属性是必须写的。其余的可以省略。

外阴影 (outset) 但是不能写    默认      想要内阴影  inset
/* box-shadow: 5px 5px 3px 4px rgba(0, 0, 0, .4);  */
水平阴影 +表示向下  -表示向上
垂直阴影 +表示向右 -表示向左


嵌套块元素垂直外边距塌陷:
父元素有上外边距同时子元素也有上外边距，此时父元素会塌陷较大的外边距值

<div class="father">
    <div class="son" />
</div>

.father{
  width:400px;
  height:400px;
  background-color:purple;
  margin-top:50px;
}

.son{
  width:200px;
  height:200px;
  background-color:purple;
  margin-top:100px;
}

解决方案
1.为父元素指定边框 例如 border:1px solid transparent
2.为父元素指定内边距 padding:1px;  
3.overflow:hidden

行内元素 只设置左右的外边距  上下的外边距不存在  可以转化为块级元素or行内块元素
