# just a flag
ENV = 'production'

# base api
VUE_APP_BASE_API = '/prod-api'

#上线后用nginx来代理 最好像这样只用相对地址 千万不要用绝对地址写死
#vue使用相对路径的时候会把本机启动的vue的ip端口加在前面 例如 本机启动是 http://192.168.33.1:9528/ 那么 axios就会baseUrl里加上 http://192.168.33.1:9528/prod-api 去访问后端
#只需要vue本机上的nginx 代理转发 /prod-api
#例如nginx 配置
#server {
#   ....
#   location ^~/prod-api/ {
#       proxy_set_header Host $http_host;
#       proxy_set_header  X-Real-IP $remote_addr;
#       proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#       proxy_set_header X-Forwarded-Proto $scheme;
#       proxy_pass http://your_server;  #代理后端的地址 注意加/ 表示连接location后面的路径 or 不加 / 表示直接替换不连接
#   }
   
#    location / {  # 代理前端的地址
#        alias /your dist path/dist;
#        try_files $uri $uri/ @router;
#        index index.html index.htm;
#    }
#    location @router {
#        rewrite ^.*$ /index.html last;
#    }
#}

# 如果代理多个前端vue项目 以一个项目为准 后面按照类似思路
#修改vue.config.js

#module.exports = {
    //部署应用包时的基本 URL
#    publicPath: '/cw',
 
#};
#修改router.js
#...
#export default new Router({
 #   base: '/cw', # 表示每个路径全局添加一个前缀/cw/ 防止页面跳转的时候出现nginx找不到页面
#})

#修改nginx.conf或者其他conf
#   location ^~/cw {  # 代理前端的地址   
#         add_header Cache-Control 'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0';
#         try_files $uri $uri/ @router;
#         index index.html index.htm;
#    }
    
#    location @router {
#            rewrite ^.*$ /cw/index.html last;
#        }



